generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  password         String?
  emailVerified    DateTime? @db.Timestamptz(6)
  role             Role      @default(USER)
  image            String?
  bio              String?
  location         String?
  website          String?
  twitter          String?
  instagram        String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime? @db.Timestamptz(6)

  // Relations
  events    Event[]
  tickets   Ticket[]
  favorites EventFavorite[]
  accounts  Account[]
  sessions  Session[]
  payouts   Payout[]

  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@index([resetToken])
  @@index([resetTokenExpiry])
  @@index([role, isActive])
  @@map("users")
}

model Event {
  id           String      @id @default(cuid())
  title        String
  description  String      @db.Text
  eventType    EventType
  date         DateTime
  endDate      DateTime?
  location     String
  venue        String?
  address      String?
  latitude     Float?
  longitude    Float?
  tags         String[]
  category     String?
  imageUrl     String?
  maxAttendees Int?
  isPublic     Boolean     @default(true)
  status       EventStatus @default(ACTIVE)
  slug         String      @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  organizerId String
  organizer   User   @relation(fields: [organizerId], references: [id], onDelete: Cascade)

  ticketTypes TicketType[]
  tickets     Ticket[]
  favorites   EventFavorite[]
  payments    Payment[]

  @@index([organizerId])
  @@index([status])
  @@index([date])
  @@index([eventType])
  @@index([isPublic])
  @@index([status, isPublic])
  @@index([date, status]) // For filtering upcoming active events
  @@map("events")
}

model Ticket {
  id             String       @id @default(cuid())
  price          Int // Price at time of purchase (historical tracking)
  quantity       Int          @default(1)
  attendeeName   String
  attendeeEmail  String
  attendeePhone  String?
  confirmationId String       @unique
  qrCode         String?
  notes          String?
  status         TicketStatus @default(ACTIVE)
  usedAt         DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  ticketTypeId String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@index([eventId])
  @@index([ticketTypeId])
  @@index([userId])
  @@index([status])
  @@index([attendeeEmail])
  @@index([eventId, status])
  @@index([ticketTypeId, status]) // For counting sold tickets per type
  @@map("tickets")
}

model TicketType {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(100)
  price     Int // Current price
  quantity  Int? // Total available - NULL means unlimited
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  eventId String
  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  @@index([eventId])
  @@index([eventId, price]) // For filtering by event and price
  @@map("ticket_types")
}

model Payment {
  id              String        @id @default(cuid())
  paystackRef     String        @unique
  amount          Int
  currency        String        @default("NGN")
  status          PaymentStatus @default(PENDING)
  platformFee     Int
  organizerAmount Int
  paymentMethod   String?
  customerEmail   String
  metadata        Json?
  webhookData     Json?
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  tickets Ticket[]

  @@index([eventId]) // Added missing index
  @@index([status]) // For filtering payments by status
  @@index([customerEmail]) // For customer payment history
  @@map("payments")
}

model EventFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId  String
  eventId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("event_favorites")
}

model Payout {
  id            String       @id @default(cuid())
  amount        Int
  status        PayoutStatus @default(PENDING)
  paystackRef   String?      @unique
  bankAccount   String?
  bankCode      String?
  accountName   String?
  reason        String?
  transferCode  String?
  processedAt   DateTime?
  failureReason String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  organizerId String
  organizer   User   @relation(fields: [organizerId], references: [id])

  @@index([organizerId])
  @@index([status])
  @@map("payouts")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum Role {
  VISITOR
  USER
  ORGANIZER
  ADMIN
}

enum EventType {
  FREE
  PAID
}

enum EventStatus {
  DRAFT
  ACTIVE
  CANCELLED
  COMPLETED
  SUSPENDED
}

enum TicketStatus {
  ACTIVE
  CANCELLED
  USED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
